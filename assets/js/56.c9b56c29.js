(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{421:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"object对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object对象"}},[t._v("#")]),t._v(" Object对象")]),t._v(" "),s("p",[t._v("Object对象的原生方法分成两类：Object本身的方法与Object的实例方法。")]),t._v(" "),s("p",[t._v("如果Object方法的参数是一个对象，它总是返回该对象，即不用转换。")]),t._v(" "),s("p",[t._v("利用这一点，可以写一个判断变量是否为对象的函数。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("h3",{attrs:{id:"数组对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组对象"}},[t._v("#")]),t._v(" 数组对象")]),t._v(" "),s("p",[t._v("Array.isArray()")]),t._v(" "),s("p",[t._v("方法返回一个布尔值，表示参数是否为数组。它可以弥补typeof运算符的不足。")]),t._v(" "),s("p",[t._v("slice()")]),t._v(" "),s("p",[t._v("slice()方法用于提取目标数组的一部分，返回一个新数组，原数组不变。")]),t._v(" "),s("blockquote",[s("p",[t._v("改变原数组的方法：push,pop,shift,unshift,reverse,splice,sort,")]),t._v(" "),s("p",[t._v("不改变的方法：join,concat,slice,map.foreach,filter,some,every,reduce,reduceright,indexof,lastindexof")])]),t._v(" "),s("h3",{attrs:{id:"数值对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值对象"}},[t._v("#")]),t._v(" 数值对象")]),t._v(" "),s("p",[t._v("toLocaleString方法接受一个地区码作为参数，返回一个字符串，表示当前数字在该地区的当地书写形式。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLocaleString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zh-Hans-CN-u-nu-hanidec'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "一二三"')]),t._v("\n")])])]),s("h3",{attrs:{id:"string对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string对象"}},[t._v("#")]),t._v(" String对象")]),t._v(" "),s("p",[t._v("charAt方法返回指定位置的字符，参数是从0开始编号的位置。")]),t._v(" "),s("p",[t._v("charCodeAt()方法返回字符串指定位置的 Unicode 码点（十进制表示），相当于String.fromCharCode()的逆操作。")]),t._v(" "),s("p",[t._v("concat方法用于连接两个字符串，返回一个新字符串，不改变原字符串。")]),t._v(" "),s("p",[t._v("slice()方法用于从原字符串取出子字符串并返回，不改变原字符串。它的第一个参数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。")]),t._v(" "),s("p",[t._v("substring方法用于从原字符串取出子字符串并返回，不改变原字符串，跟slice方法很相像。它的第一个参数表示子字符串的开始位置，第二个位置表示结束位置（返回结果不含该位置）。应该优先使用slice")]),t._v(" "),s("p",[t._v("substr方法用于从原字符串取出子字符串并返回，不改变原字符串，跟slice和substring方法的作用相同。")]),t._v(" "),s("p",[t._v("indexOf方法用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回-1，就表示不匹配。")]),t._v(" "),s("p",[t._v("lastIndexOf方法的用法跟indexOf方法一致，主要的区别是lastIndexOf从尾部开始匹配，indexOf则是从头部开始匹配。")]),t._v(" "),s("p",[t._v("trim方法用于去除字符串两端的空格，返回一个新字符串，不改变原字符串。")]),t._v(" "),s("p",[t._v("toLowerCase方法用于将一个字符串全部转为小写，toUpperCase则是全部转为大写。它们都返回一个新字符串，不改变原字符串。")]),t._v(" "),s("p",[t._v("match方法用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串。如果没有找到匹配，则返回null。")]),t._v(" "),s("p",[t._v("search方法的用法基本等同于match，但是返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。")]),t._v(" "),s("p",[t._v("replace方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有g修饰符的正则表达式）。")]),t._v(" "),s("p",[t._v("split方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。")]),t._v(" "),s("h3",{attrs:{id:"math对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math对象"}},[t._v("#")]),t._v(" Math对象")]),t._v(" "),s("p",[t._v("Math对象提供以下一些静态方法。")]),t._v(" "),s("ul",[s("li",[t._v("Math.abs()：绝对值")]),t._v(" "),s("li",[t._v("Math.ceil()：向上取整")]),t._v(" "),s("li",[t._v("Math.floor()：向下取整")]),t._v(" "),s("li",[t._v("Math.max()：最大值")]),t._v(" "),s("li",[t._v("Math.min()：最小值")]),t._v(" "),s("li",[t._v("Math.pow()：幂运算")]),t._v(" "),s("li",[t._v("Math.sqrt()：平方根")]),t._v(" "),s("li",[t._v("Math.log()：自然对数")]),t._v(" "),s("li",[t._v("Math.exp()：e的指数")]),t._v(" "),s("li",[t._v("Math.round()：四舍五入")]),t._v(" "),s("li",[t._v("Math.random()：随机数")])])])}),[],!1,null,null,null);a.default=n.exports}}]);