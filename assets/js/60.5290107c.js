(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{425:function(t,a,e){"use strict";e.r(a);var s=e(44),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h4",{attrs:{id:"vue的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的优点"}},[t._v("#")]),t._v(" vue的优点")]),t._v(" "),e("p",[t._v("轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十kb；\n简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；\n双向数据绑定：保留了angular的特点，在数据操作方面更为简单；\n组件化：保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；\n视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；\n虚拟DOM：dom操作是非常耗费性能的，不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；\n运行速度更快:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。")]),t._v(" "),e("h4",{attrs:{id:"vue生命周期的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期的理解"}},[t._v("#")]),t._v(" vue生命周期的理解")]),t._v(" "),e("p",[t._v("总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。")]),t._v(" "),e("blockquote",[e("p",[t._v("创建前/后： 在beforeCreate阶段，vue实例的挂载元素el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，el为undefined，还未初始化。")])]),t._v(" "),e("blockquote",[e("p",[t._v("载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。")])]),t._v(" "),e("blockquote",[e("p",[t._v("更新前/后：当data变化时，会触发beforeUpdate和updated方法")])]),t._v(" "),e("blockquote",[e("p",[t._v("销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在")])]),t._v(" "),e("h4",{attrs:{id:"为什么vue组件中data必须是一个函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么vue组件中data必须是一个函数"}},[t._v("#")]),t._v(" 为什么vue组件中data必须是一个函数？")]),t._v(" "),e("p",[t._v("对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，当在一个组件中修改data时，其他重用的组件中的data会同时被修改；而使用返回对象的函数，由于每次返回的都是一个新对象（Object的实例），引用地址不同，则不会出现这个问题。")]),t._v(" "),e("h4",{attrs:{id:"vue中v-if和v-show有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue中v-if和v-show有什么区别"}},[t._v("#")]),t._v(" vue中v-if和v-show有什么区别？")]),t._v(" "),e("p",[t._v("v-if和v-show看起来似乎差不多，当条件不成立时，其所对应的标签元素都不可见，但是这两个选项是有区别的:\n1、v-if在条件切换时，会对标签进行适当的创建和销毁，而v-show则仅在初始化时加载一次，因此v-if的开销相对来说会比v-show大。\n2、v-if是惰性的，只有当条件为真时才会真正渲染标签；如果初始条件不为真，则v-if不会去渲染标签。v-show则无论初始条件是否成立，都会渲染标签，它仅仅做的只是简单的CSS切换。")]),t._v(" "),e("h4",{attrs:{id:"computed和watch的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed和watch的区别"}},[t._v("#")]),t._v(" computed和watch的区别")]),t._v(" "),e("p",[t._v("计算属性computed：")]),t._v(" "),e("ul",[e("li",[t._v("支持缓存，只有依赖数据发生改变，才会重新进行计算")]),t._v(" "),e("li",[t._v("不支持异步，当computed内有异步操作时无效，无法监听数据的变化")]),t._v(" "),e("li",[t._v("computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值")]),t._v(" "),e("li",[t._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed")]),t._v(" "),e("li",[t._v("如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。")])]),t._v(" "),e("p",[t._v("侦听属性watch：")]),t._v(" "),e("ul",[e("li",[t._v("不支持缓存，数据变，直接会触发相应的操作；")]),t._v(" "),e("li",[t._v("watch支持异步；")]),t._v(" "),e("li",[t._v("监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；")]),t._v(" "),e("li",[t._v("当一个属性发生变化时，需要执行对应的操作；一对多；")]),t._v(" "),e("li",[t._v("监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数：")])]),t._v(" "),e("blockquote",[e("p",[t._v("immediate：组件加载立即触发回调函数执行")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("watch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  firstName"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代表在wacth里声明了firstName这个方法之后立即执行handler方法")]),t._v("\n    immediate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("deep: deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("watch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj.a changed'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    immediate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    deep"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n优化：\nwatch"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj.a'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'obj.a changed'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    immediate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// deep: true")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"vue-loader是什么-使用它的用途有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-loader是什么-使用它的用途有哪些"}},[t._v("#")]),t._v(" vue-loader是什么？使用它的用途有哪些？")]),t._v(" "),e("p",[t._v("vue文件的一个加载器，跟template/js/style转换成js模块。")]),t._v(" "),e("h4",{attrs:{id:"nexttick是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexttick是什么"}},[t._v("#")]),t._v(" $nextTick是什么？")]),t._v(" "),e("p",[t._v("vue实现响应式并不是数据发生变化后dom立即变化，而是按照一定的策略来进行dom更新。")]),t._v(" "),e("p",[t._v("nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用nextTick，则可以在回调中获取更新后的 DOM")]),t._v(" "),e("h4",{attrs:{id:"v-for-key的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-for-key的作用"}},[t._v("#")]),t._v(" v-for key的作用")]),t._v(" "),e("p",[t._v("当Vue用 v-for 正在更新已渲染过的元素列表是，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的改变，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。")]),t._v(" "),e("p",[t._v("为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。key属性的类型只能为 string或者number类型。")]),t._v(" "),e("p",[t._v("key 的特殊属性主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes。如果不使用 key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。使用key，它会基于key的变化重新排列元素顺序，并且会移除 key 不存在的元素。")]),t._v(" "),e("h4",{attrs:{id:"vue的双向数据绑定原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的双向数据绑定原理是什么"}},[t._v("#")]),t._v(" Vue的双向数据绑定原理是什么？")]),t._v(" "),e("p",[t._v("vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：")]),t._v(" "),e("ol",[e("li",[t._v("需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化")]),t._v(" "),e("li",[t._v("compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")]),t._v(" "),e("li",[t._v("Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:\n①在自身实例化时往属性订阅器(dep)里面添加自己\n②自身必须有一个update()方法\n③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。")]),t._v(" "),e("li",[t._v("MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。")])]),t._v(" "),e("h4",{attrs:{id:"兄弟组件传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#兄弟组件传值"}},[t._v("#")]),t._v(" 兄弟组件传值")]),t._v(" "),e("ol",[e("li",[t._v("通过中央通信 let bus = new Vue()")])]),t._v(" "),e("blockquote",[e("p",[t._v("A：methods :{ 函数{bus.$emit(‘自定义事件名’，数据)} 发送")]),t._v(" "),e("p",[t._v("B：created （）{bus.$on(‘A发送过来的自定义事件名’，函数)} 进行数据接收")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("通过vuex")])]),t._v(" "),e("h4",{attrs:{id:"请说下封装-vue-组件的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请说下封装-vue-组件的过程"}},[t._v("#")]),t._v(" 请说下封装 vue 组件的过程")]),t._v(" "),e("p",[t._v("首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。\n然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。")]),t._v(" "),e("h4",{attrs:{id:"vue-js的template编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-js的template编译"}},[t._v("#")]),t._v(" Vue.js的template编译")]),t._v(" "),e("p",[t._v("简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点），详细步骤如下：")]),t._v(" "),e("blockquote",[e("p",[t._v("首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。")]),t._v(" "),e("p",[t._v("然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）")])]),t._v(" "),e("h4",{attrs:{id:"vue如何监听对象或者数组某个属性的变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue如何监听对象或者数组某个属性的变化"}},[t._v("#")]),t._v(" vue如何监听对象或者数组某个属性的变化")]),t._v(" "),e("p",[t._v("当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，这个时候，你会发现页面并没有更新。这是因为Object.defineProperty()限制，监听不到变化。")]),t._v(" "),e("ol",[e("li",[t._v("this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)")])]),t._v(" "),e("blockquote",[e("p",[t._v('this.$set(this.arr, 0, "OBKoro1"); // 改变数组\nthis.$set(this.obj, "c", "OBKoro1"); // 改变对象')])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("调用以下几个数组的方法")])]),t._v(" "),e("blockquote",[e("p",[t._v("splice()、 push()、pop()、shift()、unshift()、sort()、reverse()")])]),t._v(" "),e("p",[t._v("vue源码里缓存了array的原型链，然后重写了这几个方法，触发这几个方法的时候会observer数据，意思是使用这些方法不用我们再进行额外的操作，视图自动进行更新。 推荐使用splice方法会比较好自定义,因为splice可以在数组的任何位置进行删除/添加操作")]),t._v(" "),e("h4",{attrs:{id:"常用的事件修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的事件修饰符"}},[t._v("#")]),t._v(" 常用的事件修饰符")]),t._v(" "),e("ul",[e("li",[t._v(".stop:阻止冒泡")]),t._v(" "),e("li",[t._v(".prevent:阻止默认行为")]),t._v(" "),e("li",[t._v(".self:仅绑定元素自身触发")]),t._v(" "),e("li",[t._v(".once: 2.1.4 新增,只触发一次")]),t._v(" "),e("li",[t._v("passive: 2.3.0 新增,滚动事件的默认行为 (即滚动行为) 将会立即触发,不能和.prevent 一起使用")]),t._v(" "),e("li",[t._v(".sync 修饰符")])]),t._v(" "),e("h4",{attrs:{id:"assets和static的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assets和static的区别"}},[t._v("#")]),t._v(" assets和static的区别")]),t._v(" "),e("p",[t._v("这两个都是用来存放项目中所使用的静态资源文件。")]),t._v(" "),e("p",[t._v("assets中的文件在运行npm run build的时候会打包，简单来说就是会被压缩体积，代码格式化之类的。打包之后也会放到static中。")]),t._v(" "),e("p",[t._v("static中的文件则不会被打包。")]),t._v(" "),e("p",[t._v("建议：将图片等未处理的文件放在assets中，打包减少体积。而对于第三方引入的一些资源文件如iconfont.css等可以放在static中，因为这些文件已经经过处理了。")])])}),[],!1,null,null,null);a.default=n.exports}}]);