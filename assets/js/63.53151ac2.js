(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{428:function(t,e,a){"use strict";a.r(e);var s=a(44),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"事件的传播"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件的传播"}},[t._v("#")]),t._v(" 事件的传播")]),t._v(" "),a("ol",[a("li",[t._v("第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。")]),t._v(" "),a("li",[t._v("第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。")]),t._v(" "),a("li",[t._v("第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。")])]),t._v(" "),a("p",[t._v("这种三阶段的传播模型，使得同一个事件会在多个节点上触发。")]),t._v(" "),a("h3",{attrs:{id:"事件的代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件的代理"}},[t._v("#")]),t._v(" 事件的代理")]),t._v(" "),a("p",[t._v("由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation）。")]),t._v(" "),a("p",[a("strong",[t._v("Event.currentTarget，Event.target")])]),t._v(" "),a("p",[t._v("Event.currentTarget属性返回事件当前所在的节点，即事件当前正在通过的节点，也就是当前正在执行的监听函数所在的那个节点。随着事件的传播，这个属性的值会变。")]),t._v(" "),a("p",[t._v("Event.target属性返回原始触发事件的那个节点，即事件最初发生的节点。这个属性不会随着事件的传播而改变。")]),t._v(" "),a("p",[a("strong",[t._v("popstate 事件")])]),t._v(" "),a("p",[t._v("popstate事件在浏览器的history对象的当前记录发生显式切换时触发。注意，调用history.pushState()或history.replaceState()，并不会触发popstate事件。该事件只在用户在history记录之间显式切换时触发，比如鼠标点击“后退/前进”按钮，或者在脚本中调用history.back()、history.forward()、history.go()时触发。")]),t._v(" "),a("p",[t._v("该事件对象有一个state属性，保存history.pushState方法和history.replaceState方法为当前记录添加的state对象。")]),t._v(" "),a("p",[a("strong",[t._v("hashchange 事件")])]),t._v(" "),a("p",[t._v("hashchange事件在 URL 的 hash 部分（即#号后面的部分，包括#号）发生变化时触发。该事件一般在window对象上监听。")]),t._v(" "),a("p",[t._v("hashchange的事件实例具有两个特有属性：oldURL属性和newURL属性，分别表示变化前后的完整 URL。")])])}),[],!1,null,null,null);e.default=r.exports}}]);