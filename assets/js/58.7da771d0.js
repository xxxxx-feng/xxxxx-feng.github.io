(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{423:function(v,_,D){"use strict";D.r(_);var O=D(44),M=Object(O.a)({},(function(){var v=this,_=v.$createElement,D=v._self._c||_;return D("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[D("p",[D("strong",[v._v("什么是虚拟 DOM")])]),v._v(" "),D("p",[v._v("虚拟 DOM 就是一个模拟真实 DOM 的树形结构，这个树结构包含了整个 DOM 结构的信息。")]),v._v(" "),D("p",[v._v("虚拟 DOM，包含了标签名称、标签属性、子节点等真实 DOM 信息")]),v._v(" "),D("p",[D("strong",[v._v("为什么使用虚拟 DOM")])]),v._v(" "),D("p",[v._v("虚拟 DOM 既然是模拟真实 DOM 的树形结构，那么为什么要用虚拟 DOM 呢？直接操作 DOM 有什么缺点吗？")]),v._v(" "),D("p",[v._v("直接操作 DOM 没有缺点，但是频繁的操作 DOM 就缺点很大，因为操作 DOM 会引起重排，频繁操作 DOM 时，浏览器会频繁重排，导致页面卡顿。")]),v._v(" "),D("p",[v._v("虚拟 DOM 通过模拟真实 DOM 的树结构，收集大量 DOM 操作，通过 diff 算法对真实 DOM 进行最小化修改，减少浏览器重排，提升加载速度，达到优化网站性能的作用。")]),v._v(" "),D("p",[D("strong",[v._v("虚拟 DOM 的实现原理")])]),v._v(" "),D("ol",[D("li",[v._v("构建虚拟 DOM 树；")])]),v._v(" "),D("blockquote",[D("ol",[D("li",[D("p",[v._v("模拟真实 DOM 树，构建虚拟 DOM 树结构，包含标签名 tagName、属性对象 props、子节点 children、子节点数 count 等属性。")])]),v._v(" "),D("li",[D("p",[v._v("创建虚拟 DOM 对象：")])]),v._v(" "),D("li",[D("p",[v._v("生成的虚拟 DOM 对象")])]),v._v(" "),D("li",[D("p",[v._v("将虚拟 DOM 转换为真实 DOM：")])])])]),v._v(" "),D("ol",{attrs:{start:"2"}},[D("li",[v._v("比较新旧虚拟 DOM 树差异；")])]),v._v(" "),D("blockquote",[D("ol",[D("li",[v._v("当新旧节点都是字符串类型时，直接替换；")]),v._v(" "),D("li",[v._v("当新旧节点的标签名、key 值相等时，对比属性 Props 以及子节点 children；")]),v._v(" "),D("li",[v._v("如果新节点存在，且和旧节点标签名不同，或者 key 不同，则直接将新节点替换为旧节点。")])])]),v._v(" "),D("ol",{attrs:{start:"3"}},[D("li",[v._v("对真实 DOM 进行最小化修改")])]),v._v(" "),D("blockquote",[D("p",[v._v("遍历真实 DOM 树，如果该 DOM 节点有 diff，则根据 diff 类型，处理 DOM 节点，如果该 DOM 节点无 diff，则遍历其子节点，直至遍历完成。")])]),v._v(" "),D("p",[v._v("虚拟 DOM 通过模拟真实 DOM 的树结构，收集大量 DOM 操作，通过 diff 算法对真实 DOM 进行最小化修改，减少浏览器重排，提升加载速度，达到优化网站性能的作用。")]),v._v(" "),D("p",[v._v("虚拟 DOM 采用函数式编程，让我们码得更好看更快乐。")])])}),[],!1,null,null,null);_.default=M.exports}}]);